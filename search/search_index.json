{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Prabha Arivalagan","text":"<p>AI Engineer </p> <ul> <li> <p>Email: prabhakaran.mails@gmail.com</p> </li> <li> <p>Github</p> </li> <li> <p>Medium Blog </p> </li> <li> <p>x / Twitter</p> </li> </ul>"},{"location":"assessment/","title":"Sample Situational Assessment","text":"<p>A company is seeking to enhance their product by conducting research and development (R&amp;D) on memory and retrieval aspects. My experience in building preprocessing features for retrieval presents an opportunity for collaboration and idea sharing. This collaboration aims to accelerate the development and R&amp;D cycle of agent/memory/retrieval features.</p>"},{"location":"assessment/#objectives","title":"Objectives","text":"<p>The objectives of this collaboration include:</p> <ul> <li>Accelerate the development and R&amp;D cycle of retrieval and processing features through conversations, brainstorms, and code contribution.</li> </ul>"},{"location":"assessment/#measures-of-success","title":"Measures of Success","text":"<p>The success of this collaboration will be measured through the following:</p> <ul> <li>Successful exploration and integration of a range of features into the retrieval engine.</li> <li>Improved performance across specific queries that are important to customers but currently underperform.</li> <li>??? We will work together to identify additional measures of success.</li> </ul>"},{"location":"assessment/#benefits","title":"Benefits","text":"<p>The collaboration leads to benefits including:</p> <ul> <li>More scalable and improved performance on important knowledge tasks.</li> <li>Raise a Series X, Make tonnes of money, reduce churn, and increase customer satisfaction.</li> </ul>"},{"location":"assessment/#methodology","title":"Methodology","text":"<p>Option 1: Serve on retainer asyncronously</p> <ul> <li>Attend stand ups and planning meetings, help with tech strategy and planning</li> <li>Work with the team to create a set of strategies and tactics</li> <li>Additional ad-hoc work, recruiting, hiring, up leveling current staff</li> </ul> <p>Option 2: Serve on retainer</p> <ul> <li>In addition to Option 1:</li> <li>Help with tech strategy and planning</li> <li>Work with the team to create a set of strategies and tactics</li> </ul> <p>Technical Writing and R&amp;D</p> <ul> <li>In addition to Option 2:</li> <li>Additional r&amp;d w/ technical blogs which to help with recruiting</li> </ul>"},{"location":"assessment/#joint-accountabilities","title":"Joint Accountabilities","text":"<ul> <li>Regular communication and updates to ensure alignment of project goals and progress.</li> <li>Adherence to confidentiality and data protection standards, with appropriate legal agreements in place.</li> <li>The team will be able to have access to my calendar to schedule</li> <li>Response to questions with 24 hours, on slack, email, call</li> <li>I can join the internal slack or create a slack connect which ever is prefered</li> <li>Documentation and code artifacts as needed</li> <li>We should Inform the other about any situations that could materially affect the outcomes and success of these projects.</li> </ul>"},{"location":"assessment/#terms-and-conditions","title":"Terms and conditions","text":"<ul> <li>Fee for Option 1 is 10000 per month</li> <li>Fee for Option 2 is 16000 per month</li> <li>Fee for Option 3 is 24000 per month</li> </ul> <p>Fifty percent is due on acceptance, balance is due 30 days after. Afterwards billed at the beginning of every month.</p> <p>Your choice of an option below and your payment consitute acceptance of the terms and conditions herein. In lieu of your signature we will proceed solely on the basis of first payment.</p>"},{"location":"contact/","title":"Prabha Arivalagan","text":"<p>AI Engineer </p> <ul> <li> <p>Email: prabhakaran.mails@gmail.com</p> </li> <li> <p>Github</p> </li> <li> <p>Medium Blog </p> </li> <li> <p>x / Twitter</p> </li> </ul>"},{"location":"writing/2024/03/19/lets-build-gpt-from-scratch/","title":"Karpathy's   let's build GPT from scratch","text":"<p>Self Note</p> <p>This note is for me to understand the concepts</p> <p>Learning Resource</p> <p>Karpathy's tutorial on Youtube Lets build GPT from scratch</p>","tags":["llm"]},{"location":"writing/2024/03/19/lets-build-gpt-from-scratch/#the-spelled-out-intro-to-neural-networks-and-backpropagation-building-micrograd-youtube","title":"The spelled-out intro to neural networks and backpropagation: building micrograd - YouTube","text":"<pre><code>In this video he buils micrograd\n</code></pre>","tags":["llm"]},{"location":"writing/2024/03/19/lets-build-gpt-from-scratch/#the-spelled-out-intro-to-language-modeling-building-makemore-youtube","title":"The spelled-out intro to language modeling: building makemore - YouTube","text":"<pre><code>Building makemore [GitHub - karpathy/makemore: An autoregressive character-level language model for making more things](https://github.com/karpathy/makemore)\n\nDataset: people names dataset in givernment website\n</code></pre>","tags":["llm"]},{"location":"writing/2024/03/19/lets-build-gpt-from-scratch/#iteration-1","title":"Iteration 1:","text":"<pre><code>    Character level language model\n\n    Method: Bigram (Predict next char using previous char)\n</code></pre> <p>     As seens above, it doesn't give good names. Bigram model is not good for predicting next character.</p> <pre><code>In \"bigram\" model probabilities become the parameter of bigram language model.\n</code></pre>","tags":["llm"]},{"location":"writing/2024/03/19/lets-build-gpt-from-scratch/#quality-evaluation-of-model","title":"Quality Evaluation of model","text":"<p>We will be using [[Negative maximum log likelihood estimate]] , in our problem we will calculate for the entire training set. </p> <pre><code>Log 1 = 0 &amp; Log (very small number ) = -Inf\n</code></pre> <p>We would estimate Negative Log likelihood as follows </p> <pre><code>log_likelihood = 0\nn = 0\nfor w in words[:3]:\n    chs = ['.'] + list(w) + ['.']\n    for ch1, ch2 in zip(chs, chs[1:]):\n        ix1 , ix2 = stoi[ch1], stoi[ch2]\n        prob=P[ix1, ix2] # P is the matrix that holds the probability\n        n+=1\n        log_likelihood+=torch.log(prob)\n        print(f'{ch1}{ch2}: {prob:.4f}')\n\nprint(f'{log_likelihood=}')\n\n#Negative log likelihood give nice property where error (loss function) should be small, i.e zero is good.\nnll = -log_likelihood\nprint(f'{nll=}')\n\n#Usually people work with average negative log likelihood\nprint(f'{nll/n=}')\n</code></pre> <p>To avoid infinity probability for some predictions, people do model \"smoothing\" (assigning very small probability to unlikely scenario)</p>","tags":["llm"]},{"location":"writing/2024/03/19/lets-build-gpt-from-scratch/#iteration-2-bigram-language-model-using-neural-network","title":"Iteration 2: Bigram Language Model using Neural Network","text":"<p>Need to create a dataset for training, i.e input and output char pair. (x and y).</p> <p>One hot encoding needs to be done before feeding into NN</p> <p><code>Log {count} = Logits</code> <code>counts = exp(Logits)</code></p> <pre><code>xenc = F.one_hot(xs, num_classes = 27).float()\nfor i in range(100):\n\n    # Forward Pass\n    logits = xenc @ W # Pred log-counts\n\n    counts = logits.exp() # Counts\n\n    probs = counts  / counts.sum(1, keepdims = True) \n\n    loss = -probs[torch.arange(228146), ys].log().mean()\n    print(loss.item())\n\n    #Backward pass\n    W.grad=None\n    loss.backward()\n\n    #Update parameters using the gradient calculated\n    W.data+= -50  * W.grad # here 50 is h , initial tried small numbers , like 0.1 but it is decreasing the loss very slowly hence increased to 50\n</code></pre>","tags":["llm"]},{"location":"writing/2024/03/19/lets-build-gpt-from-scratch/#thoughts-and-comparison-of-above-two-approaches","title":"Thoughts and comparison of above two approaches","text":"<p>In the first approach, we added 1 to the actual count because we don't want to end up in a situation it give \\(-\\infty\\) for the character pair it didn't see in the trainin dataset. If you add large number then actual frequency is less relevent and we get uniform distribution. It is called smoothing</p> <p>Similarly, gradient based approach has a way to \"smoothing\". When you keep all values of <code>W</code> to be zero, exp(W) gives all ones and softmax would provide equal probabilities to all outputs. You incentivise this in loss function by using second component like below </p> <p>```python loss = -probs[torch.arange(228146), ys].log().mean() + (0.1 * (W**2).mean()) <pre><code>Second component pushed W to be zero , 0.1 is the strength of Regularization that determines the how much weight we want to give to this regularization component. It is similar to the number of \"fake\" count you add in the first approach.\n\nWe took two approaches \n\ni)  Frequency based model \nii) NN based model (using Negative log likelihood to optimize)\n\nWe ended up with the same model , in the  NN based approach the `W` represents the log probability (same as first approach) , we can exponential the `W` to get count \n\n\n\n## [Building makemore Part 2: MLP - YouTube](https://www.youtube.com/watch?v=TCH_1BHY58I)\n\nIn this class we would build makemore to predict based on last 3 characters.\n\n#### Embedding\nAs a first step, we need to build embedding for the characters, we start with 2 dimensional embedding.\n\n![Pasted%20image%2020250130124540](img/Pasted%20image%2020250205123847.png)\n\nPasted image 20250205123847.png\n\n```python\nh = emb.view(-1, 6) @ W1 + b1 # Hiden layer activation\n</code></pre></p> <p>We index on embedding matrix to get the weight / embeddings for the character. Another way to interpret is one hot encoding. indexing and one hot encoding produce similar result. in this case we think first layer as weight of neural network.</p> <pre><code>logits = h @ W2 + b2\ncounts = logits.exp()\nprob = counts/counts.sum(1,keepdims=True)\nprob.shape\n# torch.Size([32, 27])\n</code></pre> <p>In Final layer we get probability distribution for all 27 characters.</p> <pre><code># Negative Log likelihood \n\nloss = -prob[torch.arange(32), Y].log().mean()\nloss\n</code></pre> <p>In Practice, we use mini batch for forward or backward pass. it is efficient than optimizing on the entire dataset.</p> <p>it is much efficient to take many steps (iteration) with low confidence in gradient</p>","tags":["llm"]},{"location":"writing/2024/03/19/lets-build-gpt-from-scratch/#learning-rate","title":"Learning rate","text":"<p>Learning rate is an important hyper , we need to find the reasonable range manually and we can use different techniques to search for the optimal parameter in that range.</p>","tags":["llm"]},{"location":"writing/2024/03/19/lets-build-gpt-from-scratch/#dataset-split","title":"Dataset split","text":"<p>Important to split dataset into three sets  - train split is to find model parameters </p> <ul> <li> <p>dev split is to find hyper parameters</p> </li> <li> <p>test split is to evaluate the model performance finally</p> </li> </ul> <p>we improve the model by increasing the complexity by increasing the parameters. for example hidden layer neurons can be increased.</p> <p>In our case , bottle neck may be the embeddings, we are cramping all the character in just two dimensional space. we can increase embedding dimensions to 10 from 2.</p> <p>Now we get better name sounding words than before ( with just one character in context)</p> <pre><code>dex.\nmarial.\nmekiophity.\nnevonimitta.\nnolla.\nkyman.\narreyzyne.\njaver.\ngota.\nmic.\njenna.\nosie.\ntedo.\nkaley.\nmess.\nsuhaiaviyny.\nfobs.\nmhiriel.\nvorreys.\ndasdro.\n</code></pre>","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/","title":"Building Personal Chatbot - Part 2","text":"","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/#enhancing-our-obsidian-chatbot-advanced-rag-techniques-with-langchain","title":"Enhancing Our Obsidian Chatbot: Advanced RAG Techniques with Langchain","text":"<p>In our previous post, we explored building a chatbot for Obsidian notes using Langchain and basic Retrieval-Augmented Generation (RAG) techniques. Today, I am sharing the significant improvements I've made to enhance the chatbot's performance and functionality. These advancements have transformed our chatbot into a more effective and trustworthy tool for navigating my Obsidian knowledge base.</p>","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/#system-architecture-the-blueprint-of-our-enhanced-chatbot","title":"System Architecture: The Blueprint of Our Enhanced Chatbot","text":"<p>Let's start by looking at our updated system architecture:</p> <p>![[Pasted image 20240818163253.png]]</p> <p>This diagram illustrates the flow of our enhanced chatbot, showcasing how each component works together to deliver a seamless user experience. Now, let's dive deeper into each of these components and understand their role in making our chatbot smarter and more efficient.</p>","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/#key-improvements-unlocking-new-capabilities","title":"Key Improvements: Unlocking New Capabilities","text":"<p>Our journey of improvement focused on four key areas, each addressing a specific challenge in making our chatbot more responsive and context-aware. Let's explore these enhancements and see how they work together to create a more powerful tool.</p>","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/#1-multiquery-retriever-casting-a-wider-net","title":"1. MultiQuery Retriever: Casting a Wider Net","text":"<p>Imagine you're trying to find a specific memory in your vast sea of notes. Sometimes, the way you phrase your question might not perfectly match how you wrote it down. That's where our new MultiQuery Retriever comes in \u2013 it's like having a team of creative thinkers helping you remember!</p> <pre><code>self.multiquery_retriever = CustomMultiQueryRetriever.from_llm(\n    self.retriever, llm=self.llm, prompt=self.multiquery_retriever_template\n)\n</code></pre> <p>The MultiQuery Retriever is a clever addition that generates multiple variations of your original question. Let's see it in action:</p> <p>Suppose you ask: \"What was that interesting AI paper I read last month?\"</p> <p>Our MultiQuery Retriever might generate these variations:</p> <ol> <li>\"What artificial intelligence research paper did I review in the previous month?\"</li> <li>\"Can you find any notes about a fascinating AI study from last month?\"</li> <li>\"List any machine learning papers I found intriguing about 30 days ago.\"</li> </ol> <p>By creating these diverse phrasings, we significantly increase our chances of finding the relevant information. Maybe you didn't use the term \"AI paper\" in your notes, but instead wrote \"machine learning study.\" The MultiQuery Retriever helps bridge these verbal gaps, ensuring we don't miss important information due to slight differences in wording.</p> <p>This approach is particularly powerful for:</p> <ul> <li>Complex queries that might be interpreted in multiple ways</li> <li>Recalling information when you're not sure about the exact phrasing you used</li> <li>Uncovering related information that you might not have thought to ask about directly</li> </ul> <p>The result? A much more robust and forgiving search experience that feels almost intuitive, as if the chatbot truly understands the intent behind your questions, not just the literal words you use.</p> <p>Now that we've expanded our search capabilities, let's look at how we've improved the chatbot's understanding of time and context.</p>","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/#2-selfquery-retriever-your-personal-time-traveling-assistant","title":"2. SelfQuery Retriever: Your Personal Time-Traveling Assistant","text":"<p>While the MultiQuery Retriever helps us find information across different phrasings, the SelfQuery Retriever adds another dimension to our search capabilities: time. Imagine having a super-smart assistant who not only understands your questions but can also navigate through time in your personal knowledge base. That's essentially what our SelfQuery Retriever does \u2013 it's like giving our chatbot a time machine!</p> <pre><code>self.retriever = CustomSelfQueryRetriever.from_llm(\n    llm=self.llm,\n    vectorstore=self.pinecone_retriever,\n    document_contents=self.__class__.document_content_description,\n    metadata_field_info=self.__class__.metadata_field_info,\n)\n</code></pre> <p>The SelfQuery Retriever is a game-changer for handling queries that involve dates. It's particularly useful when you're trying to recall events or information from specific timeframes in your notes. Let's see it in action:</p> <p>Suppose you ask: \"What projects was I excited about in the first week of April 2024?\"</p> <p>Here's what happens behind the scenes:</p> <ol> <li>The SelfQuery Retriever analyzes your question and understands that you're looking for:<ul> <li>Information about projects</li> <li>Specifically from the first week of April 2024</li> <li>With a positive sentiment (\"excited about\")</li> </ul> </li> <li> <p>It then translates this into a structured query that might look something like this:</p> <pre><code>{\n  \"query\": \"projects excited about\",\n  \"filter\": \"and(gte(date, 20240401), lte(date, 20240407))\"\n}\n</code></pre> </li> <li> <p>This structured query is used to search your vector database, filtering for documents within that specific date range and then ranking them based on relevance to \"projects excited about\".</p> </li> </ol> <p>The magic here is that the SelfQuery Retriever can handle a wide range of natural language date queries:</p> <ul> <li>\"What did I work on last summer?\"</li> <li>\"Show me my thoughts on AI from Q1 2024\"</li> <li>\"Any breakthroughs in my research during the holiday season?\"</li> </ul> <p>It understands these temporal expressions and converts them into precise date ranges for searching your notes.</p> <p>The result? A chatbot that feels like it has an intuitive understanding of time, capable of retrieving memories and information from specific periods in your life with remarkable accuracy. It's like having a personal historian who knows exactly when and where to look in your vast archive of experiences.</p> <p>This capability is particularly powerful for:</p> <ul> <li>Tracking progress on long-term projects</li> <li>Recalling ideas or insights from specific time periods</li> <li>Understanding how your thoughts or focus areas have evolved over time</li> </ul> <p>With the SelfQuery Retriever, your Obsidian chatbot doesn't just search your notes \u2013 it understands the temporal context of your knowledge, making it an invaluable tool for reflection, planning, and personal growth.</p> <p>But how does the chatbot know when each note was created? Let's explore how we've added this crucial information to our system.</p>","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/#3-adding-date-metadata-timestamping-your-thoughts","title":"3. Adding Date Metadata: Timestamping Your Thoughts","text":"<p>To support date-based queries and make the SelfQuery Retriever truly effective, we needed a way to associate each note with its creation date. This is where date metadata comes into play. I\u2019ve implemented a  system to extract the date from each note's filename and add it as metadata during the indexing process:</p> <pre><code>def extract_date_from_filename(filename: str) -&gt; Optional[int]:\n    match = re.match(r\"(\\\\d{4}-\\\\d{2}-\\\\d{2})\", filename)\n    if match:\n        date_str = match.group(1)\n        try:\n            date_obj = datetime.strptime(date_str, DATE_FORMAT)\n            return int(date_obj.strftime(\"%Y%m%d\"))\n        except ValueError:\n            return None\n    return None\n\n# In the indexing process\ndocument.metadata[\"date\"] = extract_date_from_filename(file)\n</code></pre> <p>This metadata allows our SelfQuery Retriever to efficiently filter documents based on date ranges or specific dates mentioned in user queries. It's like giving each of your notes a timestamp, allowing the chatbot to organize and retrieve them chronologically when needed.</p> <p>With our chatbot now able to understand both the content and the temporal context of your notes, we've added one more crucial element to make it even more helpful: the ability to remember and use information from your conversation.</p>","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/#4-enhancing-multiquery-retriever-with-chat-history-context-aware-question-generation","title":"4. Enhancing MultiQuery Retriever with Chat History: Context-Aware Question Generation","text":"<p>In our previous iteration, we already used chat history to provide context for our LLM's responses. However, we've now taken this a step further by incorporating chat history into our MultiQuery Retriever. This enhancement significantly improves the chatbot's ability to understand and respond to context-dependent queries, especially in ongoing conversations.</p> <p>Let's see how this works in practice:</p> <p>Imagine you're having a conversation with your chatbot about your work projects:</p> <p>You: \"What projects did I work on March 1?\" Chatbot: [Provides a response about your March 1 projects]</p> <p>You: \"How about March 2?\"</p> <p>Without context, the MultiQuery Retriever might generate variations like:</p> <ol> <li>\"What happened on March 2?\"</li> <li>\"Events on March 2\"</li> <li>\"March 2 activities\"</li> </ol> <p>These queries, while related to the date, miss the crucial context about projects.</p> <p>However, with our chat history-aware MultiQuery Retriever, it might generate variations like:</p> <ol> <li>\"What projects did I work on March 2?\"</li> <li>\"Project activities on March 2\"</li> <li>\"March 2 project updates\"</li> </ol> <p>These variations are much more likely to retrieve relevant information about your projects on March 2, maintaining the context of your conversation.</p> <p>This improvement is crucial for maintaining coherent, context-aware conversations. Without it, the MultiQuery Retriever could sometimes generate less useful variations, particularly in multi-turn interactions where the context from previous messages is essential.</p> <p>By making the MultiQuery Retriever aware of chat history, we've significantly enhanced its ability to generate relevant query variations. This leads to more accurate document retrieval and, ultimately, more contextually appropriate responses from the chatbot.</p> <p>This enhancement truly brings together the power of our previous improvements. The MultiQuery Retriever now not only casts a wider net with multiple phrasings but does so with an understanding of the conversation's context. Combined with our SelfQuery Retriever's ability to handle temporal queries and our robust date metadata, we now have a chatbot that can navigate your personal knowledge base with remarkable context awareness and temporal understanding.</p>","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/#custom-implementations-tailoring-the-tools-to-our-needs","title":"Custom Implementations: Tailoring the Tools to Our Needs","text":"<p>To achieve these enhancements, we created several custom classes, each designed to extend the capabilities of Langchain's base components. Let's take a closer look at two key custom implementations:</p> <ol> <li>CustomMultiQueryRetriever: This class extends the base MultiQueryRetriever to incorporate chat history in query generation.</li> <li>CustomSelfQueryRetriever: We customized the SelfQuery Retriever to work seamlessly with our Pinecone vector store and handle date-based queries effectively.</li> </ol> <p>Here's a snippet from our CustomMultiQueryRetriever to give you a taste of how we've tailored these components:</p> <pre><code>class CustomMultiQueryRetriever(MultiQueryRetriever):\n    def _get_relevant_documents(\n        self,\n        query: str,\n        history: str,\n        *,\n        run_manager: CallbackManagerForRetrieverRun,\n    ) -&gt; List[Document]:\n        queries = self.generate_queries(query, history, run_manager)\n        if self.include_original:\n            queries.append(query)\n        documents = self.retrieve_documents(queries, run_manager)\n        return self.unique_union(documents)\n\n    def generate_queries(\n        self, question: str, history: str, run_manager: CallbackManagerForRetrieverRun\n    ) -&gt; List[str]:\n        response = self.llm_chain.invoke(\n            {\"question\": question, \"history\": history},\n            config={\"callbacks\": run_manager.get_child()},\n        )\n        if isinstance(self.llm_chain, LLMChain):\n            lines = response[\"text\"]\n        else:\n            lines = response\n        return lines\n</code></pre> <p>These custom implementations allow us to tailor the retrieval process to our specific needs, improving the overall performance and relevance of the chatbot's responses.</p> <p>While these enhancements have significantly improved our chatbot, the journey wasn't without its challenges. Let's reflect on some of the hurdles we faced and the lessons we learned along the way.</p>","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/#challenges-and-learnings-navigating-the-complexities-of-langchain","title":"Challenges and Learnings: Navigating the Complexities of Langchain","text":"<p>While Langchain provides a powerful framework for building RAG systems, we found that its complexity can sometimes be challenging. Digging into different parts of the codebase to understand and modify behavior required significant effort. However, this process also provided valuable insights into the inner workings of RAG systems and allowed us to create a more tailored solution for our Obsidian chatbot.</p> <p>Some key learnings from this process include:</p> <ul> <li>The importance of thoroughly understanding each component before attempting to customize it</li> <li>The value of incremental improvements and testing each change individually</li> <li>The need for patience when working with complex, interconnected systems</li> </ul> <p>These challenges, while sometimes frustrating, ultimately led to a deeper understanding of RAG systems and a more robust final product.</p> <p>Now that we've enhanced our chatbot with these powerful features, let's explore some of the exciting ways it can be used.</p>","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/#use-cases-and-examples-putting-our-enhanced-chatbot-to-work","title":"Use Cases and Examples: Putting Our Enhanced Chatbot to Work","text":"<p>With these improvements, our Obsidian chatbot is now capable of handling a wider range of queries with improved accuracy. Here are some example use cases that showcase its new capabilities:</p> <ol> <li>Date-specific queries: \"What projects was I working on in the first week of March 2024?\"</li> <li>Context-aware follow-ups: \"Tell me more about the meeting I had last Tuesday.\"</li> <li>Complex information retrieval: \"Summarize my progress on Project X over the last month.\"</li> </ol> <p>These examples demonstrate the chatbot's ability to understand temporal context, maintain conversation history, and provide more relevant responses. It's not just a search tool anymore \u2013 it's becoming a true digital assistant that can help you navigate and make sense of your personal knowledge base.</p> <p>As exciting as these improvements are, we're not stopping here. Let's take a quick look at what's on the horizon for our Obsidian chatbot.</p>","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/#future-plans-the-road-ahead","title":"Future Plans: The Road Ahead","text":"<p>While we've made significant strides in improving our chatbot, there's always room for further enhancements. One exciting avenue we're exploring is the integration of open-source LLMs to make the system more privacy-focused and self-contained. This could potentially allow users to run the entire system locally, ensuring complete privacy of their personal notes and queries.</p>","tags":["llm"]},{"location":"writing/2024/08/18/building-obsidian-kb-chatbot/#conclusion-a-smarter-more-intuitive-chatbot-for-your-personal-knowledge-base","title":"Conclusion: A Smarter, More Intuitive Chatbot for Your Personal Knowledge Base","text":"<p>By implementing advanced RAG techniques such as MultiQuery Retriever, SelfQuery Retriever, and incorporating chat history, we've significantly enhanced our Obsidian chatbot's capabilities. These improvements allow for more accurate and contextually relevant responses, especially for date-based queries and complex information retrieval tasks.</p> <p>Building this enhanced chatbot has been a journey of continuous learning and iteration. We've tackled challenges, discovered new possibilities, and created a tool that we hope will make navigating personal knowledge bases easier and more intuitive.</p> <p>We hope that sharing our experience will inspire and help others in the community who are working on similar projects. Whether you're looking to build your own chatbot or simply interested in the possibilities of AI-assisted knowledge management, we hope this post has provided valuable insights.</p> <p>You can find the final code in this\u00a0GitHub repo</p> <p>If you have any feedback or simply want to connect, please hit me up on\u00a0LinkedIn\u00a0or\u00a0@prabha-tweet</p>","tags":["llm"]},{"location":"writing/2024/04/29/building-obsidian-kb-chatbot/","title":"Building an Obsidian Knowledge base Chatbot: A Journey of Iteration and Learning","text":"<p>As an avid Obsidian user, I've always been fascinated by the potential of leveraging my daily notes as a personal knowledge base. Obsidian has become my go-to tool for taking notes, thanks to its simplicity and the wide range of customization options available through community plugins. With the notes and calendar plugins enabled, I can easily capture my daily thoughts and keep track of the projects I'm working on. But what if I could take this a step further and use these notes as the foundation for a powerful chatbot?</p> <p>Imagine having a personal assistant that could answer questions like:</p> <ol> <li>\"What was that fascinating blog post I read last week?\"</li> <li>\"Which projects was I working on back in February 2024?\"</li> <li>\"Could you give me a quick summary of my activities from last week?\"</li> </ol> <p>Excited by the possibilities, I embarked on a journey to build a chatbot that could do just that. In this blog post, I'll share my experience of building this chat app from scratch, including the challenges I faced, the decisions I had to make, and the lessons I learned along the way. You can find the final code in this GitHub repo</p>","tags":["llm","obsidian-kb"]},{"location":"writing/2024/04/29/building-obsidian-kb-chatbot/#iteration-1-laying-the-groundwork","title":"Iteration 1: Laying the Groundwork","text":"<p>To kick things off, I decided to start with a simple Retrieval-Augmented Generation (RAG) system for the app. The stack I chose consisted of:</p> <ul> <li>Pinecone for the Vector DB</li> <li>Streamlit for creating the chat interface</li> <li>Langchain framework for tying everything together</li> <li>OpenAI for the Language Model (LLM) and embeddings</li> </ul> <p>I began by embedding my Obsidian daily notes into a Pinecone Vector database. Since my notes aren't particularly lengthy, I opted to embed each daily note as a separate document. Pinecone's simplicity and quick setup allowed me to focus on building the chatbot's functionality rather than getting bogged down in infrastructure.</p> <p>For the language model, I chose OpenAI's GPT-4, as its advanced reasoning capabilities would simplify the app-building process and reduce the need for extensive preprocessing.</p> <p>The initial chatbot workflow looked like this:</p> <p></p> <p>The first version of the chatbot was decent, but I wanted to find a way to measure its performance and track progress as I iterated. After some research, I discovered the RAGAS framework, which is designed specifically for evaluating retrieval-augmented generation systems. By creating a dataset with question-answer pairs, I could measure metrics like answer correctness, relevancy, context precision, recall, and faithfulness.</p> <p></p> <p>I included all the metrics available through the RAGAS library, as I was curious to see how they would be affected by my improvements. You can read more about RAGAS metrics here. At this stage, I wasn't sure what to make of the numbers or whether they indicated good or bad performance, but it was a starting point.</p> Metric Base Performance Answer_correctness 0.42 Answer_relevancy 0.39 Answer_similarity 0.84 Context_entity_recall 0.27 Context_precision 0.71 Context_recall 0.43 Context_relevancy 0.01 Faithfulness 0.39","tags":["llm","obsidian-kb"]},{"location":"writing/2024/04/29/building-obsidian-kb-chatbot/#iteration-2-refining-the-approach","title":"Iteration 2: Refining the Approach","text":"<p>With the evaluation framework in place, I reviewed the examples and runs to identify areas for improvement. One thing that stood out was the presence of Dataview queries in my notes. These queries are used in Obsidian to pull data from various notes, similar to SQL queries. However, they don't execute and provide results when the Markdown file is viewed or accessed outside of Obsidian. I realized that these queries might be introducing noise and not adding much value, so I decided to remove them.</p> <p>After making this change and re-evaluating the chatbot, I was surprised to see that the answer metrics had actually gone down. Digging deeper, I discovered that the vector search wasn't yielding the correct daily notes, even for straightforward queries like \"What did I do on March 4, 2024?\" On the bright side, context precision had improved since the context no longer contained Dataview queries.</p> Metric Base Iteration 2 Answer_correctness 0.42 0.34 Answer_relevancy 0.39 0.36 Answer_similarity 0.84 0.81 Context_entity_recall 0.27 0.09 Context_precision 0.71 0.87 Context_recall 0.43 0.42 Context_relevancy 0.01 0.02 Faithfulness 0.39 0.69 <p>To address the issue with vector search, I made two adjustments: 1. Increased the number of documents returned by the retriever from the default 4 to 20. 2. Switched to using a MultiQuery retriever.</p> <p>The goal was to retrieve a larger set of documents, even if their relevancy scores were low, in the hopes that the reranker model would be able to identify and prioritize the most relevant ones.</p> <p>These changes led to a slight improvement in the answer-related metrics compared to the previous iterations. However, the context-related metrics took a hit due to the increased number of documents being considered. I was willing to accept this trade-off for now, as my notes were well-structured, and I believed a highly capable LLM should be able to extract the necessary information.</p> Metric Base Iteration 2 Iteration 2.1 Answer_correctness 0.42 0.34 0.45 Answer_relevancy 0.39 0.36 0.48 Answer_similarity 0.84 0.81 0.85 Context_entity_recall 0.27 0.09 0.15 Context_precision 0.71 0.87 0.62 Context_recall 0.43 0.42 0.35 Context_relevancy 0.01 0.02 0.00 Faithfulness 0.39 0.69 0.56","tags":["llm","obsidian-kb"]},{"location":"writing/2024/04/29/building-obsidian-kb-chatbot/#iteration-3-updating-evaluation-dataset","title":"Iteration 3: Updating Evaluation dataset","text":"<p>As I reviewed the evaluation run, I noticed an interesting pattern. When there were no relevant notes to answer a question, the LLM correctly responded with \"I don't know.\" This matched the ground truth, but the answer correctness was being computed as 0.19 instead of a value closer to 1.</p> <p>To improve the evaluation process, I updated the dataset to include \"I don't know\" as the expected answer in cases where no relevant information was available. This simple change had a significant impact on the answer metrics, providing a more accurate assessment of the chatbot's performance.</p> Metric Base Iteration 2 Iteration 2.1 Iteration 3 Answer_correctness 0.42 0.34 0.45 0.62 Answer_relevancy 0.39 0.36 0.48 0.60 Answer_similarity 0.84 0.81 0.85 0.89 Context_entity_recall 0.27 0.09 0.15 0.14 Context_precision 0.71 0.87 0.62 0.62 Context_recall 0.43 0.42 0.35 0.37 Context_relevancy 0.01 0.02 0.00 0.00 Faithfulness 0.39 0.69 0.56 0.61","tags":["llm","obsidian-kb"]},{"location":"writing/2024/04/29/building-obsidian-kb-chatbot/#the-journey-continues","title":"The Journey Continues...","text":"<p>At this point, I have a functional chatbot that serves as a powerful search engine for my personal knowledgebase. While I'm happy with the progress so far, there's still room for improvement. Some ideas for future iterations include:</p> <ul> <li>Implementing document retrieval based on metadata like date, to provide more accurate answers for time-sensitive questions.</li> <li>Exploring the use of open-source LLMs like LLAMA3 to keep my data private and self-contained.</li> </ul> <p>Building this chatbot has been an incredible learning experience, showcasing the power of combining Obsidian, vector databases, and language models. Not only has it given me a valuable tool for accessing my own knowledge, but it has also highlighted the importance of iterative development and continuous evaluation.</p> <p>I hope my journey inspires other Obsidian enthusiasts to explore the possibilities of creating their own personal knowledgebase chatbots. By leveraging our daily notes and harnessing the power of AI, we can unlock new ways to interact with and learn from the information we capture.</p> <p>You can find the final code in this GitHub repo</p> <p>If you have any feedback or simply want to connect, please hit me up on\u00a0LinkedIn\u00a0or\u00a0@prabha-tweet</p>","tags":["llm","obsidian-kb"]},{"location":"writing/2024/04/19/quantized-llm-models/","title":"Quantized LLM Models","text":"<p>Large Language Models (LLMs) are known for their vast number of parameters, often reaching billions. For example, open-source models like Llama2 come in sizes of 7B, 13B, and 70B parameters, while Google's Gemma has 2B parameters. Although OpenAI's GPT-4 architecture is not publicly shared, it is speculated to have more than a trillion parameters, with 8 models working together in a mixture of experts approach.</p>","tags":["llm"]},{"location":"writing/2024/04/19/quantized-llm-models/#understanding-parameters","title":"Understanding Parameters","text":"<p>A parameter is a model weight learned during the training phase. The number of parameters can be a rough indicator of a model's capability and complexity. These parameters are used in huge matrix multiplications across each layer until an output is produced.</p>","tags":["llm"]},{"location":"writing/2024/04/19/quantized-llm-models/#the-problem-with-large-number-of-parameters","title":"The Problem with Large Number of Parameters","text":"<p>As LLMs have billions of parameters, loading all the parameters into memory and performing massive matrix multiplications becomes a challenge. Let's consider the math behind this:</p> <p>For a 70B parameter model (like the Llama2-70B model), the default size in which these parameters are stored is 32 bits (4 bytes). To load this model, you would need:</p> <p>70B parameters * 4 bytes = 260 GB of memory</p> <p>This highlights the significant memory requirements for running LLMs.</p>","tags":["llm"]},{"location":"writing/2024/04/19/quantized-llm-models/#quantization-as-a-solution","title":"Quantization as a Solution","text":"<p>Quantization is a technique used to reduce the size of the model by decreasing the precision of parameters and storing them in less memory. For example, representing 32-bit floating-point (FP32) parameters in a 16-bit floating-point (FP16) datatype.</p> <p>In practice, this loss of precision does not significantly degrade the output quality of LLMs but offers substantial performance improvements in terms of efficiency. By quantizing the model, the memory footprint can be reduced, making it more feasible to run LLMs on resource-constrained systems.</p> <p>Quantization allows for a trade-off between model size and performance, enabling the deployment of LLMs in a wider range of applications and devices. It is an essential technique for making LLMs more accessible and efficient while maintaining their impressive capabilities.</p> <p>The table below compares the performance of Google\u2019s 2B Gemma model with 32-bit and 16-bit precision. The quantized 16-bit model is 28% faster with approximately 50% less memory usage.</p> Gemma FP 32 bit precision Gemma FP16 bit precision # of Parameters 2,506,172,416 2,506,172,416 Memory Size based on # Parameters &gt; 2.5B * 4 Bytes9.33 GB &gt; 2.5B * 2 Bytes4.66 GB Memory Footprint 9.39 GB 4.73 GB Average Inference time 10.36 seconds 7.48 seconds Distribution of Inference Time","tags":["llm"]},{"location":"writing/2024/04/19/quantized-llm-models/#impact-on-accuracy","title":"Impact on Accuracy","text":"<p>To assess the impact of quantization on accuracy, I ran the output of both models and computed the similarity score using OpenAI's <code>text-embedding-3-large</code> model. The results showed that the similarity scores between the outputs of the 32-bit and 16-bit models were highly comparable with 0.998 cosine similarity, indicating that quantization does not significantly affect the model's accuracy.</p> <p>In conclusion, quantization is a powerful technique for reducing the memory footprint and improving the efficiency of LLMs while maintaining their performance. By enabling the deployment of LLMs on a wider range of devices and applications, quantization plays a crucial role in making these impressive models more accessible and practical for real-world use cases.</p> <p>Note</p> <p>Inference time and Accuracy are measured for 100 random question, you can find them in the colab notebook</p> <p>Good Resource on this topic</p> <p>DLAI - Quantization Fundamentals</p> <p>If you have any feedback or simply want to connect, please hit me up on\u00a0LinkedIn\u00a0or\u00a0@prabha-tweet</p>","tags":["llm"]},{"location":"writing/2024/03/06/tokenizer-comparison/","title":"Tokenizer comparison","text":"<p>Self Note</p> <p>This note is for myself to understand the concepts</p> <p>Very good resource Karpathy's Tokenizer Video</p> <p>It is always clear that LLMs use different tokenizer , i want to test it. </p> <p>I have downloaded from gutenberg.org/cache/epub/100/pg100.txt</p> <p>comparison of  My Colab Notebook</p> <p></p>","tags":["llm"]},{"location":"writing/archive/2024/","title":"2024","text":""}]}